{% extends 'base.html.twig' %}

{% block title %}
    Liste des articles
{% endblock %}

{% block stylesheets %}
    {% stylesheets '@AppBundle/Resources/hbase/hts/css/hts.css'
        filter='cssrewrite' %}
        <link rel="stylesheet" href="{{ asset_url }}" />
    {% endstylesheets %}
{% endblock %}


{% block content_header %}
    <h1 class="hts-article-title">Liste des articles</h1>
{% endblock %}

{%  block content %}
    <p>la liste viendra ci-dessous</p>

    <table id="table"
           data-response-handler="responseHandler"
           data-detail-formatter="detailFormatter"
           data-minimum-count-columns="1"
           data-show-pagination-switch="true"
           data-pagination="true"
           data-id-field="id"
           data-page-list="[10, 25, 50, 100, ALL]"
           data-side-pagination="server"
           data-url="{{ path('article_getlistdata') }}"
           >
    </table>



    {#{% include '@AppBundle/Resources/views/Article/list_tab.html.twig' %}#}


{% endblock %}

{% block javascript %}
    <script type="application/javascript">
        const $table = $('#table');
        const $remove = $('#remove');
        let selections = [];

        function initTable() {
            $table.bootstrapTable({
                rowAttributes:function(row, index) {

                    return {"data-value":JSON.stringify(row)};
                },
                height: getHeight(),
                columns: [
                    [
                        {
                            field: 'title',
                            title: 'Titre',
                            sortable: true,
                            editable: false,
                            align: 'center'
                        },
                        {
                            field: 'type.label',
                            title: 'Type',
                            sortable: true,
                            editable: false,
                            align: 'center'
                        },
                        {
                            field: 'beginHDate',
                            title: 'Date de dÃ©but',
                            sortable: true,
                            editable: false,
                            align: 'center',
                            formatter:function(value, row, index, field) {
                                if(value === null) return '-';
                                let hDate = hb.util.HDate.prototype.parseFromJson(JSON.stringify(value));
                                console.log(hDate);
                                return hDate.getLabel();
                            }
                        },
                        {
                            field: 'endHDate',
                            title: 'Date de fin',
                            sortable: true,
                            editable: false,
                            align: 'center',
                            formatter:function(value, row, index, field) {
                                if(value === null) return '-';
                                let hDate = hb.util.HDate.prototype.parseFromJson(JSON.stringify(value));
                                console.log(hDate);
                                return hDate.getLabel();
                            }
                        }
                    ]
                ]
            });
            // sometimes footer render error.
            setTimeout(() => {
                $table.bootstrapTable('resetView');
            }, 200);
            $table.on('check.bs.table uncheck.bs.table ' +
                'check-all.bs.table uncheck-all.bs.table', () => {
                $remove.prop('disabled', !$table.bootstrapTable('getSelections').length);

                // save your data, here just save the current page
                selections = getIdSelections();
                // push or splice the selections if you want to save all data selections
            });
            $table.on('expand-row.bs.table', (e, index, row, $detail) => {
                if (index % 2 == 1) {
                    $detail.html('Loading from ajax request...');
                    $.get('LICENSE', res => {
                        $detail.html(res.replace(/\n/g, '<br>'));
                    });
                }
            });
            $table.on('all.bs.table', (e, name, args) => {
                console.log(name, args);
            });
            $remove.click(() => {
                const ids = getIdSelections();
                $table.bootstrapTable('remove', {
                    field: 'id',
                    values: ids
                });
                $remove.prop('disabled', true);
            });
            $(window).resize(() => {
                $table.bootstrapTable('resetView', {
                    height: getHeight()
                });
            });
        }



        function getIdSelections() {
            return $.map($table.bootstrapTable('getSelections'), ({id}) => id);
        }

        function responseHandler(res) {
            $.each(res.rows, (i, row) => {
                row.state = $.inArray(row.id, selections) !== -1;
            });
            return res;
        }

        function detailFormatter(index, row) {
            const html = [];
            $.each(row, (key, value) => {
                html.push(`<p><b>${key}:</b> ${value}</p>`);
            });
            return html.join('');
        }

        function operateFormatter(value, row, index) {
            return [
                '<a class="like" href="javascript:void(0)" title="Like">',
                '<i class="glyphicon glyphicon-heart"></i>',
                '</a>  ',
                '<a class="remove" href="javascript:void(0)" title="Remove">',
                '<i class="glyphicon glyphicon-remove"></i>',
                '</a>'
            ].join('');
        }

        window.operateEvents = {
            'click .like': function (e, value, row, index) {
                alert(`You click like action, row: ${JSON.stringify(row)}`);
            },
            'click .remove': function(e, value, {id}, index) {
                $table.bootstrapTable('remove', {
                    field: 'id',
                    values: [id]
                });
            }
        };

        function totalPriceFormatter(data) {
            let total = 0;
            $.each(data, (i, {price}) => {
                total += +(price.substring(1));
            });
            return `$${total}`;
        }

        function getHeight() {
            return $(window).height() - $('h1').outerHeight(true);
        }

        $(() => {
            initTable();
        })

    </script>
{% endblock%}