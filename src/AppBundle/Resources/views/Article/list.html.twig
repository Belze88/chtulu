{% extends 'base.html.twig' %}

{% block title %}
    Liste des articles
{% endblock %}

{% block stylesheets %}
{% endblock %}


{% block content_header %}
    <h1 class="hb-title">Liste des articles</h1>
{% endblock %}

{%  block content %}

    <div id="search" class = "container">
        {{ form_start(searchForm) }}
            <div class="form-group col-xs-12 col-4 col-lg-3 row">
                {{ form_label(searchForm.type) }}
                {{ form_widget(searchForm.type) }}
            </div>
            <div class="form-group col-xs-6 col-4 col-lg-3 row">
                {{ form_label(searchForm.beginHDate) }}
                {{ form_widget(searchForm.beginHDate) }}
            </div>
            <div class="form-group col-xs-6 col-4 col-lg-3 row">
                {{ form_label(searchForm.endHDate) }}
                {{ form_widget(searchForm.endHDate) }}
            </div>
            <div class="form-group col-xs-12 col-4 col-lg-3 row">
                <button id="{{ searchForm.vars.id }}_save" name="{{ searchForm.vars.id }}[save]" type="submit" class="btn btn-primary">
                    <i class="glyphicon glyphicon-search"></i>
                </button>
            </div>

        {{ form_end(searchForm) }}
    </div>
    <div id="toolbar" class="btn-group" >
        <button id="add-article" type="button"  title="Ajout rapide article" class="btn btn-info">
            <i class="glyphicon glyphicon-plus"></i>
        </button>
    </div>
    <table id="table"
           data-response-handler="responseHandler"
           data-detail-formatter="detailFormatter"
           data-minimum-count-columns="1"
           data-show-pagination-switch="true"
           data-pagination="true"
           data-id-field="id"
           data-page-list="[10, 25, 50, 100]"
           data-side-pagination="server"
           data-search="true",
           data-toolbar="#toolbar"
           data-url="{{ path('article_getlistdata') }}"
           >
    </table>


    <div id="modal-article" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="Article">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Modal Header</h4>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">

                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascript %}
    <script type="application/javascript">
        articleModal = new hb.ui.HModal({
            detailBuilder:new hb.ui.detailBuilder.ArticleBuilder(),
            formBuilder:new hb.ui.form.FormBuilder("article_dto"),
            detailMediator:new hb.ui.detailMediator.ArticleMediator(),
            formMediator:new hb.ui.SfFormMediator(),
            groups:["minimal","date","abstract","detailImage","detailImageUrl"],
            defaultTitle:"Nouvel article"
        });

        articleModal.$modal.on('show.bs.modal', function () {
            console.log("modal shown !");
            //hb.ui.manager.get("hdatepicker").$modal.appendTo(articleModal.$modal);
        });

        const $table = $('#table');
        const $remove = $('#remove');
        let selections = [];

        function initTable() {
            $table.bootstrapTable({
                sortName:'editionDate',
                sortOrder:'desc',
                idField:'id',
                responseHandler:function(res) {
                    console.log(res.rows);
                    for(let i=0;i<res.rows.length;i++){
                        Object.setPrototypeOf(res.rows[i], hb.util.dto.Article);
                        res.rows[i].finalize();
                        res.rows[i].localIndex = i;
                        res.rows[i].$bsTable = $table;
                    }
                    console.log(res);
                return res;
                },
                rowAttributes:function(row, index) {
                    return {};
                    //return {"data-value":JSON.stringify(row)};
                },
                height: getHeight(),
                columns: [
                    [
                        {
                            field: 'title',
                            title: 'Titre',
                            sortable: true,
                            editable: false,
                            align: 'center',
                            formatter:function(value, row, index, field) {
                                console.log(row);
                                let finalValue = value;
                                if(row.detailImageResource &&
                                    row.detailImageResource.activeVersion){
                                    let activeVersion = row.detailImageResource.activeVersion;
                                    finalValue += "&nbsp;";
                                    finalValue +=
                                        "<img src=\"" + activeVersion.urlMini + "\"  class=\"img-circle\">";

                                }
                                return finalValue;
                            }
                        },
                        {
                            field: 'type.label',
                            title: 'Type',
                            sortable: true,
                            editable: false,
                            searchable : true,
                            align: 'center'
                        },
                        {
                            field: 'beginHDate',
                            title: 'Date de d√©but',
                            sortable: true,
                            editable: false,
                            align: 'center',
                            formatter:function(value, row, index, field) {
                                if(value === null) return '-';
                                //let hDate = hb.util.HDate.prototype.parseFromJson(JSON.stringify(value));
                                return value.getLabel();
                            }
                        },
                        {
                            field: 'endHDate',
                            title: 'Date de fin',
                            sortable: true,
                            editable: false,
                            align: 'center',
                            formatter:function(value, row, index, field) {
                                if(value === null) return '-';
                                return value.getLabel();
                            }
                        },
                        {
                            field: 'actions',
                            title: 'Actions',
                            align: 'center',
                            events: {
                                'click .like': function (e, value, row, index) {
                                    console.log(value);
                                    console.log(row);
                                    console.log(articleModal.$modal);
                                    console.log($("#modal-article"));
                                    //$("#modal-article").modal();
                                    //$("#modal-article").modal();

                                    articleModal.bind(row);
                                    articleModal.$modal.modal();


                                    //alert(`You click lol action, row: ${JSON.stringify(row)}`);
                                },
                                'click .remove': function(e, value, {id}, index) {
                                    $table.bootstrapTable('remove', {
                                        field: 'id',
                                        values: [id]
                                    });
                                }
                            },
                            formatter: function(value, row, index) {
                                let edit = "javascript:void(0)";
                                if (row.urlBag !== null) edit = row.urlBag.edit;
                                let view = "javascript:void(0)";
                                if (row.urlBag !== null) view = row.urlBag.view;

                                return [
                                    '<a class="like" href="javascript:void(0)" title="Preview">',
                                    '<i class="fa fa-info-circle"></i>',
                                    '</a> ',
                                    '<a class="like" href="'+ view + '" title="Voir">',
                                    '<i class="fa fa-eye"></i>',
                                    '</a> ',
                                    '<a class="like" href="'+ edit + '"  title="Editer">',
                                    '<i class="fa fa-edit"></i>',
                                    '</a> '
                                ].join('');
                            }
                        }
                    ]
                ]
            });
            // sometimes footer render error.
            setTimeout(() => {
                $table.bootstrapTable('resetView');
            }, 200);
            $table.on('check.bs.table uncheck.bs.table ' +
                'check-all.bs.table uncheck-all.bs.table', () => {
                $remove.prop('disabled', !$table.bootstrapTable('getSelections').length);

                // save your data, here just save the current page
                selections = getIdSelections();
                // push or splice the selections if you want to save all data selections
            });
            $table.on('expand-row.bs.table', (e, index, row, $detail) => {
                if (index % 2 == 1) {
                    $detail.html('Loading from ajax request...');
                    $.get('LICENSE', res => {
                        $detail.html(res.replace(/\n/g, '<br>'));
                    });
                }
            });
            $(window).resize(() => {
                $table.bootstrapTable('resetView', {
                    height: getHeight()
                });
            });
        }
        function getIdSelections() {
            return $.map($table.bootstrapTable('getSelections'), ({id}) => id);
        }

        function getHeight() {
            return $(window).height() - $('h1').outerHeight(true)-420;
        }

        $(() => {
            initTable();
            $(".search").hide();
        });

        let newHArticlePrototype = $("#data-new-article").html();
        newHArticlePrototype = JSON.parse(newHArticlePrototype);
        Object.setPrototypeOf(newHArticlePrototype, hb.util.dto.Article);
        newHArticlePrototype.finalize();
        console.log(newHArticlePrototype);

        $("#add-article").on("click",function(){
            let newHArticle = {};
            newHArticle.$bsTable = $table;
            Object.setPrototypeOf(newHArticle,hb.util.dto.Article);
            Object.assign(newHArticle,newHArticlePrototype);
            articleModal.bind(newHArticle,'form');
            console.log(newHArticle);
            articleModal.$modal.modal();
        });

        let $searchForm = $('form[name="article_search"]');
        $searchForm.form = $searchForm;
        let searchFormMediator = new hb.ui.SfFormMediator();
        searchFormMediator.$target = $searchForm;

        $searchForm.on("submit",function(event){
            event.preventDefault();
            event.stopPropagation();
            $(event.target).serializeArray().slice();
            searchFormMediator.object = null;
            searchFormMediator.return($(event.target).serializeArray().slice());
            console.log($(event.target).serializeArray().slice());
            console.log("un petit test");
            console.log(searchFormMediator.object);
            let options = $table.bootstrapTable('resetSearch',JSON.stringify(searchFormMediator.object));
        });
    </script>
{% endblock%}

{% block data %}
    {{ form_start(form) }}
    {{ form_widget(form) }}
    <button id="{{ form.vars.id }}_save" name="{{ form.vars.id }}[save]" type="submit" class="btn btn-primary">Enregistrer</button>
    <a id="cancel" name="cancel" class="btn btn-default">Retour <i class="fa fa-info-circle"></i></a>
    <a id="delete" name="delete" class="btn btn-warning">Supprimer</a>
    {{ form_end(form) }}
    <div id="data-new-article">{{ newArticleDTO }}</div>
{% endblock %}