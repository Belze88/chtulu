{% extends 'base.html.twig' %}

{% block title %}
    {{ title }}
{% endblock %}

{% block stylesheets %}
{% endblock %}


{% block content_header %}
    <h1 class="hb-title"></h1>
{% endblock %}

{%  block content %}
    <div id="hb-article-container" class="row-fluid">
        <div id="hb-article-form" class="row-fluid"></div>
        <div id="hb-article-detail" class="row-fluid" hidden="hidden"></div>
    </div>
{% endblock %}

{% block javascript %}
    <script type="application/javascript">
        let article = JSON.parse($("#data-article").html());
        $("#data-article").html("");
        Object.setPrototypeOf(article, hb.util.dto.Article);
        article.finalize();

        let formBuilder = new hb.ui.form.FormBuilder("article_dto");
        let formMediator = new hb.ui.SfFormMediator();
        let detailBuilder = new hb.ui.detailBuilder.ArticleBuilder();
        let detailMediator = new hb.ui.detailMediator.ArticleMediator();

        let $target = $("#hb-article-container");
        $target.alerts=[];
        $target.detail = $("#hb-article-detail");
        $target.form = $("#hb-article-form");
        $target.title = $(".hb-title");
        detailMediator.$target = $target;
        formMediator.$target = $target;
        formMediator.object = article;

        formBuilder.build($target.form,article.groups.filter(item => item !== 'url'));

        detailBuilder.build($target.detail,article.groups.filter(item => item !== 'url'));
        $target.detail.append($("<a id=\"resume-edit\" name=\"preview\" class=\"btn btn-primary\">Continuer l'Ã©dition <i class=\"fa fa-edit\"></i></a>"));
        detailMediator.object = article;
        detailMediator.map(article.groups.filter(item => item !== 'url'));


        $target.form.find("form").on("submit",function(event,element){
            event.preventDefault();
            event.stopPropagation();
            console.log("submitted form");
            console.log($(event.target));
            console.log($(event.target).serializeArray().slice());
            formMediator.return($(event.target).serializeArray().slice());
            console.log("objet : ");
            console.log(article);
        });

        let tempArticle = {};
        $("#preview").on("click",function(event,element){
            tempArticle = jQuery.extend(true, {}, article);
            tempArticle.urlBag.post = null;
            formMediator.object = tempArticle;
            detailMediator.object = tempArticle;
            $target.form.find("form").trigger("submit");

            detailMediator.map(tempArticle.groups.filter(item => item !== 'url'));

            $target.form.hide();
            $target.detail.show();

            formMediator.object = article;
            detailMediator.object = article;
        });
        $("#resume-edit").on("click",function(event,element){
            $target.detail.hide();
            $target.form.show();
            tempArticle= null;
        });
        $("#cancel").on("click",function(event,element){
            formMediator.map();
        });

        console.log(article);

        /*submitFile = function(){
            console.log("yolo");
            throw 'lol';

            let $form = hResourcePicker.$modal.uploadPanel.form;
            let $iframe = hResourcePicker.$modal.uploadPanel.iframe;

            let typeId = "resource_post_upload_image";

            let url = $form.find("#" + typeId).html();
            $iframe.attr("name","iframe_" + typeId);
            $form.attr('action',url);
            //$form.attr('target',"iframe_" + typeId);
            $form.attr('target',"_blank");

            console.log($form);
            return;
            $form.get(0).submit();
        };*/


        // prototyping a resource picker
        var hb = (function (hb) {
            "use strict";
            var _moduleName = "ui:HResourcePicker/HResourcePicker.js";
            if (((typeof hb.getLoadedModules === "function" ? hb.getLoadedModules() : [])).includes(_moduleName)) {
                console.log(_moduleName + " already loaded, skipping");
                return hb;
            }
            hb.ui = (function (ui, hb, $) {
                var _requiredModules = ["util:cmn/common.js"];

                let _onHbDeleterClick = function($this,mode='value'){
                    console.log("delete");
                    let $target = $($this.attr('target'));
                    $target.attr("value",null);
                };

                let _onHbResourcePickerChange = function($this){
                    console.log("change");
                    console.log($this);
                    let $button = $("a[target=\"#" + $this.attr('id') + "\"]");
                    if(typeof $this.attr("value") !== 'undefined' &&
                        $this.attr("value") !== null &&
                        $this.attr("value") !==''){
                        let resource = JSON.parse($this.attr("value"));
                        let name = resource.name + '-' + resource.activeVersion.number;
                        if(resource.activeVersion.type && resource.activeVersion.type !==''){
                            name = name + '.' + resource.activeVersion.type;
                        }
                        $button.html(name + "&nbsp;");
                        console.log(resource);
                        if(resource.activeVersion.urlMini && resource.activeVersion.urlMini!==''){
                            let $mini = $("<img src=\"" + resource.activeVersion.urlMini + "\"  class=\"img-circle\">");
                            $button.append($mini);
                        }

                        $button.append("&nbsp;");
                        let $deleter = $("<i class=\"fa fa-times-circle hb-deleter\"></i>");
                        $deleter.attr("target","#" + $this.attr('id'));
                        $deleter.on("click",function(event){
                            event.preventDefault();
                            event.stopPropagation();
                            _onHbDeleterClick($(this));
                            _onHbResourcePickerChange($this);
                        });
                        $button.append($deleter);
                    }
                    else{
                        $button.html("Selectionner une image <i class=\"fa fa-image\"></i>");
                    }
                };

                $($(".hb-resourcepicker").each(function(){
                    let $this = $(this);
                    let classes = $this.attr('class').split(/\s+/);
                    let concreteClass = '';
                    $.each(classes, function(index, item) {
                        if ($.inArray(item,['hb-imagepicker']) !== -1) {concreteClass = item;}
                    });


                    console.log($this.attr('class').split(/\s+/));
                    let $button = $("<a target=\"#" + $this.attr('id') + "\" class=\"btn btn-default " + concreteClass + " \">" +
                        "</a>").insertAfter($this);
                    $button.attr('data-hb-value',$this.attr('value'));
                    $this.hide();
                    _onHbResourcePickerChange($this);
                }));

                $(".hb-resourcepicker").on("change",function(){_onHbResourcePickerChange($(this));});


                /**
                 * @doc setDefaultOption for HResourcePicker
                 * @param option
                 * @returns {object}
                 * @private
                 */
                let _setDefaultOption = function(option) {
                    option.detailBuilder = option.detailBuilder || null;
                    option.detailMediator = option.detailMediator || null;
                    option.formBuilder = option.formBuilder || null;
                    option.formMediator = option.formMediator || null;
                    option.z = option.z || 7;
                    option.fadeTime = option.fadeTime || 250;
                    option.defaultTitle = option.defaultTitle || "Choisissez une ressource";
                    option.groups = option.groups || ["minimal"];
                    option.uploadFormName = "h_file_upload";
                    return option;
                };

                /**
                 * @doc apply options to HResourcePicker
                 * @private
                 */
                let _applyOption = function(modal){

                    let $modal = modal.$modal;
                };

                /**
                 * @doc builds modal container
                 * @private
                 */
                let _build = function() {
                    let $modal = $("<div class=\"modal fade\" " +
                        "role=\"dialog\">").appendTo('body');
                    $modal.alerts=[];
                    $modal.container = $("<div class=\"modal-dialog\" role=\"document\">").appendTo($modal);
                    $modal.content = $("<div class=\"modal-content\">").appendTo($modal.container);

                    $modal.header = $("<div class=\"modal-header\">").appendTo($modal.content);
                    $modal.title = $("<h4 class=\"modal-title\">Modal Header</h4>").appendTo($modal.header);
                    $modal.header.append("<button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>");

                    $modal.body = $("<div class=\"modal-body\">").appendTo($modal.content);
                    $modal.detail = $("<div class= \"hb-detail\">").appendTo($modal.body);
                    $modal.form = $("<div class= \"hb-form\">").appendTo($modal.body);

                    $modal.footer = $("<div class=\"modal-footer\">").appendTo($modal.content);
                    $modal.footer.append("<button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Fermer</button>");

                    return $modal;
                };

                let _getNewPanel = function(id,accordionSelector){
                    let $panel = $("<div class=\"panel panel-default\">");
                    $panel.heading = $("<div class=\"panel-heading\" role=\"tab\" id=\""+ id +"-heading\">").appendTo($panel);

                    $panel.button = $("<a role=\"button\" data-toggle=\"collapse\" data-parent=\"" + accordionSelector + "\" " +
                        "href=\"#" + id + "-collapse\" class=\"collapsed\" aria-controls=\""+ id + "-collapse\">lol</a>")
                        .appendTo($("<h4 class=\"panel-title\">").appendTo($panel.heading));

                    $panel.body = $("<div class=\"panel-body\">")
                        .appendTo($("<div id=\""+ id +"-collapse\" class=\"panel-collapse collapse\" " +
                            "role=\"tabpanel\" aria-labelledby=\"" + id + "\">").appendTo($panel));
                    console.log($panel);
                    return $panel;
                };

                let _buildUploadPanel = function(modal){
                    let $modal = modal.$modal;
                    $modal.uploadPanel = _getNewPanel('hrp-upload','#resource-picker-accordion');
                    $modal.uploadPanel.appendTo($modal.panelGroup);

                    let $form = $("div#hb-data form[name='" + modal.option.uploadFormName  + "']");
                    console.log($form);
                    console.log($form.length>0);
                    if($form.length!==1){return [];}
                    $form.parent().detach().appendTo($modal.uploadPanel.body);

                    $modal.uploadPanel.form = $form;
                    $modal.uploadPanel.iframe = $form.parent().find("iframe");

                    $modal.uploadPanel.submitButton = $form.parent().find("button[type='submit']");

                    $form.find("input[name$='[file]']").on("change",function(){
                        let regex = new RegExp("([\\w|-]+)\\.(\\w+)$");
                        let pieces = regex.exec($(this).val());
                        if(pieces !== null && typeof pieces[1] !== 'undefined'){
                            $form.find("input[name$='[name]']").val(pieces[1]);
                        }
                    });



                };

                let _buildSelectPanel = function(modal){
                    let $modal = modal.$modal;
                    $modal.selectPanel = _getNewPanel('hrp-select','#resource-picker-accordion');
                    $modal.selectPanel.appendTo($modal.panelGroup);
                };

                /**
                 * @module hb/ui/HResourcePicker
                 * @class hb.ui.HResourcePicker
                 * @param {object} option
                 */
                ui.HResourcePicker = function(option = {}){
                    this.errors=[];
                    this.object=null;

                    this.option = _setDefaultOption(option);
                    this.$modal = _build(this);
                    this.$modal.title.text(this.option.defaultTitle);

                    this.$modal.panelGroup = $("<div class=\"panel-group\" id=\"resource-picker-accordion\" " +
                        "role=\"tablist\" aria-multiselectable=\"true\">").appendTo(this.$modal.body);
                    _buildUploadPanel(this);
                    _buildSelectPanel(this);
                    console.log(this.$modal.uploadPanel.button);
                    this.$modal.uploadPanel.button.html('Charger depuis votre poste');
                    this.$modal.selectPanel.button.html('Selectionner dans votre galerie');

                    let modal = this;
                    this.$modal.uploadPanel.submitButton.on('click',function(event){
                        event.preventDefault();
                        event.stopPropagation();
                        modal.$modal.uploadPanel.form.find(".hb-form-error").each(function(){$(this).remove();});

                        let $form = modal.$modal.uploadPanel.form;
                        let $iframe = modal.$modal.uploadPanel.iframe;

                        let typeId = "resource_post_upload_image";

                        let url = $form.parent().find("#" + typeId).html();
                        url = url + '?name=' + $form.find("input[name$='[name]']").val();
                        $form.attr('action',url);


                        console.log($iframe);
                        console.log($form);
                        console.log($form.attr('target'));

                        $form.submit();
                    });

                    this.$modal.uploadPanel.iframe.on('load',function(event){
                        let response = modal.$modal.uploadPanel.iframe.get(0).contentDocument.body.textContent;
                        console.log(response);
                        response = JSON.parse(response);
                        hb.ui.misc.alert(response.status,response.message,modal.$modal.uploadPanel.form);
                        if(response.status === "error"){
                            if(response.errors !== null && typeof response.errors ==='object'){
                                Object.keys(response.errors).map(function(key, index) {
                                    let $errorTarget = modal.$modal.uploadPanel.form.find("[name$='["+ key +"]']");
                                    let errorMsg = '';
                                    for (var i in response.errors[key]){
                                        errorMsg = response.errors[key][i];
                                        $("<li style='color:red' class='hb-form-error'>").html(errorMsg).
                                        insertAfter($errorTarget);
                                    }
                                });
                            }
                            return;
                        }
                        if(response.status === "success"){
                            let resource = response.data;
                            let name = resource.name + '-' + resource.activeVersion.number;
                            if(resource.activeVersion.type && resource.activeVersion.type !==''){
                                name = name + '.' + resource.activeVersion.type;
                            }
                            modal.object.attr('data-hb-value',response.data);
                            console.log(modal.object);
                            modal.object.text(name);
                            let $target = $(modal.object.attr('target'));
                            console.log($target);
                            if($target !== null){
                                $target.attr('value',JSON.stringify(resource));
                                $target.trigger("change");
                            }
                        }
                    });
                    _applyOption(this);
                    return this;
                };

                let _prototype = {
                    bind : function(object,page='detail') {
                        this.object = object;
                        this.$modal.modal('show');
                    },
                    refresh:function(page='all'){
                        //_refresh(this,page);
                    },
                    unbind : function() {
                        this.object = null;
                        this.$modal.modal("hide");
                    }
                };
                Object.assign(ui.HResourcePicker.prototype,_prototype);



                let hResourcePicker = new hb.ui.HResourcePicker();


                ui.hResourcePicker = {};
                ui.hResourcePicker.submitFile = function(){

                };





                $($("a.hb-imagepicker").on('click',function(){
                    //console.log(hResourcePicker.$modal);
                    hResourcePicker.bind($(this));
                }));





                console.log(_moduleName + " loaded");
                return ui;
            }(hb.ui || {}, hb, $));

            let _loadedModules = ((typeof hb.getLoadedModules === "function") ? hb.getLoadedModules() : []);
            _loadedModules.push(_moduleName);
            hb.getLoadedModules = function () {
                return _loadedModules;
            };
            return hb;
        }(hb || {}));





        // HTimeExplorer prototyping
        var hb = (function (hb) {
            "use strict";
            var _moduleName = "ui:HTimeExplorer/HTimeExplorer.js";
            if (((typeof hb.getLoadedModules === "function" ? hb.getLoadedModules() : [])).includes(_moduleName)) {
                console.log(_moduleName + " already loaded, skipping");
                return hb;
            }
            hb.ui = (function (ui, hb, $) {
                var _requiredModules = ["util:cmn/common.js"];

                const _ZOOM_SCALE = [0.000001,1000000];
                let _zoomAccelerator = d3.scaleLinear()
                    .domain([0,1,7,20,40,80,1000,10000*365.25,12000*365.25])
                    .range([15, 10,5,3,1.8,1,0.5,0.2]);
                const _DATE_MIN = (new Date('9999-01-01')).setFullYear(-9999);
                const _DATE_MAX = new Date();

                /**
                 * @doc setDefaultOption for HTimeExplorer
                 * @param option
                 * @returns {object}
                 * @private
                 */
                let _setDefaultOption = function(option) {
                    return option;
                };
                /**
                 * @doc apply options to HArticleModal
                 * @private
                 */
                let _applyOption = function(modal){

                };

                let _svgDrawer = function(explorer,drawGroups=['all']){
                    explorer.d3SvgContainer.attr("width","100%").attr("height","100");
                    console.log(explorer.$centralContainer.width());

                    let hScale = d3.scaleLinear()
                        .domain([0, 100])
                        .range([0, explorer.$centralContainer.width()]);
                    console.log(hScale);

                    //let path = hb.util.geom.getTriangleDefPoints(100,10,150,50);
                    let relPath = "M 2% 50 L 7% 10 L 7% 30 L 90% 30 L "
                        + "90% 10 L 98% 50 L 90% 90 L 90% 70 L " +
                        "7% 70 L 7% 90 Z";

                    let absPath = hb.util.geom.hScalePath(relPath,hScale);




                    explorer.d3SvgTimeArrow= explorer.d3SvgContainer.append("path");
                    explorer.d3SvgTimeArrow.attr("fill","pink")
                        .attr("stroke","blue").attr("stroke-width",1)
                        .attr("d",absPath)
                        .call(d3.drag()
                            .on("start", function(){return _dateDragStarted(d3.event,explorer);})
                            .on("drag",  function(){return _dateDragged(d3.event,explorer);})
                            .on("end", function(){return _dateDragEnded(d3.event,explorer);})
                        )
                        .call(d3.zoom()
                            .scaleExtent(_ZOOM_SCALE)
                            .on("start", function(){return _dateZoomStarted(d3.event,explorer,d3.mouse(this));})
                            .on("zoom",  function(){return _dateZoomed(d3.event,explorer);})
                            .on("end", function(){return _dateZoomEnded(d3.event,explorer);})
                        );

                    explorer.$articleContainer = $("<div class='hb-hte-articles'/>").appendTo(explorer.$centralContainer);
                    console.log(explorer.d3SvgContainer.style("width"));
                    explorer.$articleContainer.height("50").width(hb.util.geom.getPathMaxX(explorer.d3SvgTimeArrow.attr('d')));

                    explorer.d3ArticleContainer = d3.select(explorer.$articleContainer.get(0));

                    explorer.d3SvgArticleContainer = explorer.d3ArticleContainer.append("svg").attr("width","100%")
                        .attr("height","100");

                    explorer.timeScale.range([
                        hb.util.geom.getPathMinX(explorer.d3SvgTimeArrow.attr('d')),
                        hb.util.geom.getPathMaxX(explorer.d3SvgTimeArrow.attr('d'))]);

                    let date = new Date(2000,6,24);


                    explorer.d3SvgArticleTest = explorer.d3SvgArticleContainer.append("circle")
                        .attr("r",5)
                        .attr("fill","yellow")
                        .attr("cursor","pointer")
                        .attr("stroke","orange")
                        .attr("stroke-width",2)
                        .attr("cx",explorer.timeScale(date))
                        .attr('cy',30);

                    explorer.hTimeRange = new hb.util.HTimeRange(explorer);
                    explorer.hTimeRange.setHDate(explorer.hDate);

                    explorer.$centralContainer.on("hb.hresize",function(event,ratio){
                        explorer.timeScale.range([
                            hb.util.geom.getPathMinX(explorer.d3SvgTimeArrow.attr('d')),
                            hb.util.geom.getPathMaxX(explorer.d3SvgTimeArrow.attr('d'))*ratio]);

                        /*console.log(explorer.$centralContainer.width());
                        console.log(explorer.d3SvgTimeArrow.style("width"));
                        console.log(ratio);*/
                        explorer.d3SvgTimeArrow.attr("transform","scale(" + ratio + ",1)");
                        explorer.d3SvgArticleTest.attr("cx",explorer.timeScale(date));
                        explorer.$articleContainer.width(hb.util.geom.getPathMaxX(explorer.d3SvgTimeArrow.attr('d'))*ratio);
                        explorer.hTimeRange.setHDate(explorer.hDate);
                    });
                };

                /**
                 * @doc builds explorer main object
                 * @private
                 */
                let _build = function(explorer) {
                    let $container = explorer.$target.parent().parent();
                    console.log($container.find("label"));
                    $container.find("label").each(function(){
                        $(this).remove();
                        $(this).parent().remove();
                    });

                    explorer.$header = $("<div class=\"row\"</div>").appendTo($container);
                    let $inputContainer = $("<div class=\"col-xs-10 col-xs-offset-1" +
                        " col-sm-8 col-sm-offset-2" +
                        " col-md-4 col-md-offset-4 +" +
                        " col-lg-4 col-lg-offset-4\"></div>").appendTo(explorer.$header);

                    explorer.$target.parent().detach();
                    $inputContainer.append(explorer.$target.detach());

                    explorer.$body = $("<div class=\"row\"</div>").appendTo($container);

                    explorer.$centralContainer = $("<div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 hb-hte-container\" " +
                        "style=\"white-space: nowrap;display: inline-block;" +
                        "float: none;padding:0px 30px 0px;\"></div>").appendTo(explorer.$body);

                    let d3CentralContainer = d3.select(explorer.$centralContainer.get(0));
                    explorer.d3SvgContainer = d3CentralContainer.append("svg");
                    _svgDrawer(explorer);


                    return $container;
                };

                let _dateDragStarted =function (event,explorer){
                    explorer.dragData = {initialX:event.x,delta:0};
                };
                let _dateDragged = function (event,explorer) {
                    let ud = hb.util.date;
                    //let dx = event.x - explorer.dragData.initialX;
                    let delta = - (explorer.dragData.delta + hb.util.date.floatDayDiff(explorer.timeScale.invert(event.x),
                        explorer.timeScale.invert(explorer.dragData.initialX)));
                    let intDelta = Math.floor(delta);

                    explorer.dragData.delta  = intDelta -delta;
                    explorer.dragData.initialX = event.x;

                    if(intDelta !== 0){
                        let newBeginDate = hb.util.date.addDay(hb.util.date.clone(explorer.hDate.beginDate),intDelta);
                        let newEndDate = hb.util.date.addDay(hb.util.date.clone(explorer.hDate.endDate),intDelta);

                        if(newBeginDate < _DATE_MIN) newBeginDate = ud.clone(_DATE_MIN);
                        if(newEndDate > _DATE_MAX) newEndDate = ud.clone(_DATE_MAX);

                        explorer.setHDate(new hb.util.HDate(2,newBeginDate,newEndDate));

                        explorer.$target.first().val(explorer.hDate.getLabel());
                        explorer.$target.first().attr("data-hb-value",JSON.stringify(explorer.hDate));
                    }
                    /*if(hts.eventInitialized){
                        hts.renderEvent();
                    }*/
                };
                let _dateDragEnded = function (event,explorer) {} ;

                let _dateZoomStarted = function (event,explorer,mousePos){
                    let ud = hb.util.date;

                    explorer.zoomData = explorer.zoomData || {};
                    let adjRatio=explorer.zoomData.initialZoomK || event.transform.k;

                    explorer.zoomData = {initialZoomX:mousePos[0],initialZoomK:adjRatio};

                    explorer.zoomData.initialZoomDate = ud.addDay(
                        ud.clone(explorer.timeScale.invert(explorer.zoomData.initialZoomX)),1);
                };

                let _dateZoomed = function (event,explorer) {
                    let ud = hb.util.date;

                    let hDate = explorer.hDate;
                    let zoomData = explorer.zoomData;
                    let nbJBegin = hb.util.date.dayDiff(hDate.beginDate,zoomData.initialZoomDate);
                    let nbJEnd = hb.util.date.dayDiff(hDate.endDate,zoomData.initialZoomDate);

                    // acceleration varies with the number of day
                    let intervalSize = explorer.hDate.getIntervalSize();
                    console.log(intervalSize );
                    console.log(_zoomAccelerator(intervalSize));
                    let adjRatio = 1 + (event.transform.k - 1)*_zoomAccelerator(intervalSize);

                    // new day count from zoom date
                    let newNbJBegin = Math.round(nbJBegin * zoomData.initialZoomK /adjRatio);
                    let newNbJEnd = Math.round(nbJEnd * zoomData.initialZoomK /adjRatio);

                    let newBeginDate = ud.addDay(ud.clone(zoomData.initialZoomDate),newNbJBegin);
                    let newEndDate = ud.addDay(ud.clone(zoomData.initialZoomDate),newNbJEnd);

                    if(newBeginDate < _DATE_MIN) newBeginDate = ud.clone(_DATE_MIN);
                    if(newEndDate > _DATE_MAX) newEndDate = ud.clone(_DATE_MAX);

                    explorer.setHDate(new hb.util.HDate(2,newBeginDate,newEndDate));
                    explorer.$target.first().val(explorer.hDate.getLabel());
                    explorer.$target.first().attr("data-hb-value",JSON.stringify(explorer.hDate));



                    zoomData.initialZoomK = adjRatio;
                };

                let _dateZoomEnded = function (event,explorer) {
                    explorer.zoomData.initialZoomK=1;
                    event.transform.k=1;
                };

                /**
                 * @module hb/ui/HTimeExplorer
                 * @class hb.ui.HTimeExplorer
                 */
                ui.HTimeExplorer = function($target,option = {}){
                    this.$target=$target;

                    this.option = _setDefaultOption(option);
                    _applyOption(this);

                    console.log($target.first().val());
                    console.log(hb.util.HDate.prototype.parseFromJson($target.first().val()));

                    this.hDate = hb.util.HDate.prototype.parseFromJson($target.first().val());

                    //this.hDate = new hb.util.HDate(2,new Date(2000,0,1),new Date(2001,0,1));

                    this.timeScale = d3.scaleTime().domain([this.hDate.beginDate,this.hDate.endDate]);
                    this.relativeTimeScale = d3.scaleTime()
                        .range([0,100])
                        .domain([this.hDate.beginDate,this.hDate.endDate]);
                    _build(this);

                    let $this = this;
                    this.$target.on("change",function(){
                        $this.setHDate(hb.util.HDate.prototype.parseFromJson($target.first().attr("data-hb-value")));
                    });

                    return this;
                };

                Object.assign(ui.HTimeExplorer.prototype,{
                    setHDate:function(hDate){
                        this.hDate = hDate;
                        this.timeScale.domain([this.hDate.beginDate,this.hDate.endDate]);
                        this.relativeTimeScale.domain([this.hDate.beginDate,this.hDate.endDate]);
                        this.hTimeRange.setHDate(this.hDate);
                    }
                });



                $($(".hb-hte").each(function(){
                    let hte = new ui.HTimeExplorer($(this));
                }));


                console.log(_moduleName + " loaded");
                return ui;
            }(hb.ui || {}, hb, $));

            let _loadedModules = ((typeof hb.getLoadedModules === "function") ? hb.getLoadedModules() : []);
            _loadedModules.push(_moduleName);
            hb.getLoadedModules = function () {
                return _loadedModules;
            };
            return hb;
        }(hb || {}));

        $(() => {
            let $container = $(".hb-container");
            let currentWidth = $container.width();
            let currentHeight = $container.height();
            let originalWidth = $container.width();
            let originalHeight = $container.height();
            console.log(originalWidth);

            let triggerResize = function() {
                resize = false;

                if(currentWidth !== $container.width()){
                    currentWidth = $container.width();
                    $(".hb-hte-container").trigger('hb.hresize',[$container.width()/originalWidth]);
                    resize = true;
                }
                if(currentHeight !== $container.height()){
                    resize = true;
                    currentHeight = $container.height();
                    //$(".hb-the-container").trigger('hb.vresize');
                }
                console.log(resize);
                return resize;
            };

            $(window).resize(triggerResize);
            $(".sidebar-toggle").on("click",function(){
                setTimeout(function(){
                    console.log($container.width());
                    triggerResize();
                }, 350);
            });
        });

        $(


        );





    </script>
{% endblock%}

{% block data %}
    {{ form_start(form) }}
    {{ form_widget(form) }}
    <button id="{{ form.vars.id }}_save" name="{{ form.vars.id }}[save]" type="submit" class="btn btn-primary">Enregistrer</button>
    <a id="preview" name="preview" class="btn btn-info">Previsualiser <i class="fa fa-eye"></i></a>
    <a id="cancel" name="cancel" class="btn btn-default">Annuler modifications <i class="fa fa-undo"></i></a>
    {{ form_end(form) }}
    <div id="data-article">{{ articleDTO }}</div>
    {% include '@AppBundle/Form/uploadFileForm.html.twig' with {'form': fileUploadForm} %}
{% endblock %}