<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Article;
use AppBundle\Factory\ArticleDTOFactory;
use AppBundle\Factory\ArticleCollectionDTOFactory;
use AppBundle\DTO\ArticleModalDTO;
use AppBundle\DTO\ArticleMainDTO;
use AppBundle\DTO\ArticleCollectionDTO;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    
    public function bindDTO($id,$dto)
    {
        
        $qb = $this->createQueryBuilder('a')
        ->select('a')
        ->where('a.id = :id')
        ->setParameter('id', $id);
        /** @var Article */
        $article = $qb->getQuery()->getOneOrNullResult();
        if ($article === null)return false;
        $this->bindModalDTO($dto, $article);
        if($dto instanceof ArticleMainDTO || $dto instanceof ArticleCollectionDTO){
            $dto->content = "test";
        }
        
         return true;
    }
        
    private function bindModalDTO($dto,Article $article)
    {
        $article->bindDTO($dto);
        $dto->isBeginDateApprox = true;
        $dto->beginDate = null;
        if($article->getMinBeginDate() !== null && $article->getMaxBeginDate() === null){
            $dto->isBeginDateApprox = false;
            $dto->beginDate = $article->getMinBeginDate();
            $dto->minBeginDate = null;
            $dto->maxBeginDate = null;
        }
        $dto->hasNotEndDate = true;
        $dto->isEndDateApprox = false;
        $dto->endDate = null;
        if($article->getMinEndDate() === null && $article->getMaxEndDate() !== null){
            $dto->hasNotEndDate = false;
            $dto->endDate = $article->getMaxEndDate();
            $dto->minEndDate = null;
            $dto->maxEndDate = null;
        }
        else if($article->getMinEndDate() !== null && $article->getMaxEndDate() !== null){
            $dto->hasNotEndDate = false;
            $dto->isEndDateApprox = true;
        }
    }
    
    

}
