<?php
namespace App\Repository;

use App\Entity\ArticleType;
use App\Helper\DateHelper;
use App\Mapper\AutoMapper;
use App\Util\HDate;
use Doctrine\ORM\EntityRepository;
use App\Entity\Article;
use App\Factory\ArticleDTOFactory;
use App\Factory\ArticleCollectionDTOFactory;
use App\DTO\ArticleModalDTO;
use App\DTO\ArticleMainDTO;
use App\DTO\ArticleCollectionDTO;
use App\Helper\StaticHelper;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;

/**
 * PendingActionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PendingActionRepository extends EntityRepository
{
    /**
     * returns true if one pendingAction of the given type with this token exists, false otherwise
     * @param string $token
     * @param string $type
     * @return boolean
     */
    public function tokenExists($token,$type)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('count(a.id) FROM ' . $this->getEntityName() . ' a')
            ->where('a.token = :token')
            ->andWhere('a.type = :type')
            ->setParameter('token',$token)
            ->setParameter('type',$type);

        $result = $qb->getQuery()->getSingleScalarResult();
        if($result !== null && $result>0) {return true;}
        return false;
    }
}
